
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  googlemail: 'googlemail',
  extra: 'extra',
  contact: 'contact',
  lastname: 'lastname',
  password: 'password'
};

exports.Prisma.JobProfileScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  jobsapplied: 'jobsapplied',
  lastdisabled: 'lastdisabled',
  createdAt: 'createdAt',
  workdone: 'workdone',
  status: 'status',
  location: 'location'
};

exports.Prisma.DealersScalarFieldEnum = {
  id: 'id',
  idd: 'idd',
  name: 'name',
  dealeremail: 'dealeremail',
  dealerid: 'dealerid',
  email: 'email',
  phonenum: 'phonenum',
  verified: 'verified',
  address: 'address',
  category: 'category',
  transactionWorth: 'transactionWorth',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderStatus: 'orderStatus',
  sellerid: 'sellerid',
  buyerName: 'buyerName',
  buyerEmail: 'buyerEmail',
  buyerContact: 'buyerContact',
  buyerId: 'buyerId',
  orders: 'orders'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  createdAt: 'createdAt',
  userid: 'userid',
  coverimgUrl: 'coverimgUrl',
  budget: 'budget'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  projectId: 'projectId',
  name: 'name',
  useremail: 'useremail'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  available: 'available',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  value: 'value',
  stock: 'stock',
  valueperpeice: 'valueperpeice',
  projectId: 'projectId'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  verified: 'verified',
  phonenum: 'phonenum',
  useriid: 'useriid',
  createdat: 'createdat'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  image: 'image',
  rating: 'rating',
  address: 'address',
  soldout: 'soldout',
  description: 'description',
  ownerId: 'ownerId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  task: 'task',
  team: 'team',
  amount: 'amount',
  startdate: 'startdate',
  deadline: 'deadline',
  description: 'description',
  supplier: 'supplier',
  subtasks: 'subtasks',
  inventories: 'inventories',
  teamlead: 'teamlead',
  priority: 'priority',
  status: 'status',
  projectId: 'projectId',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  gstrate: 'gstrate',
  dealer: 'dealer',
  status: 'status',
  proof: 'proof',
  type: 'type',
  createdAt: 'createdAt',
  financeId: 'financeId'
};

exports.Prisma.FinanceScalarFieldEnum = {
  id: 'id',
  income: 'income',
  expenditure: 'expenditure',
  budget: 'budget',
  balance: 'balance',
  MPIN: 'MPIN'
};

exports.Prisma.RemaindersScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  dealer: 'dealer',
  date: 'date',
  financeId: 'financeId'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  financeId: 'financeId',
  type: 'type'
};

exports.Prisma.ScheduleMsgScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phonenum: 'phonenum',
  Datetime: 'Datetime',
  type: 'type',
  text: 'text',
  status: 'status',
  createdAt: 'createdAt',
  projectId: 'projectId'
};

exports.Prisma.SellerAccountScalarFieldEnum = {
  id: 'id',
  sales: 'sales'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  description: 'description',
  rating: 'rating',
  imageurl: 'imageurl',
  quantity: 'quantity',
  sellerName: 'sellerName',
  expirydate: 'expirydate',
  category: 'category',
  specialmsg: 'specialmsg',
  stock: 'stock',
  contact: 'contact',
  questions: 'questions',
  mode: 'mode',
  type: 'type',
  offers: 'offers',
  sellerid: 'sellerid'
};

exports.Prisma.ProductQueryScalarFieldEnum = {
  id: 'id',
  username: 'username',
  userid: 'userid',
  name: 'name',
  contact: 'contact',
  additionalQueies: 'additionalQueies',
  question: 'question',
  answers: 'answers',
  productId: 'productId'
};

exports.Prisma.WishListScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  productid: 'productid'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  review: 'review',
  userid: 'userid',
  username: 'username',
  productId: 'productId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  originalName: 'originalName',
  title: 'title',
  storageUrl: 'storageUrl',
  uploadDate: 'uploadDate',
  isEncrypted: 'isEncrypted',
  notes: 'notes',
  projectId: 'projectId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.OrderStatus = exports.$Enums.OrderStatus = {
  Pending: 'Pending',
  Delivered: 'Delivered'
};

exports.Category = exports.$Enums.Category = {
  Event_Management: 'Event_Management',
  Construction_Projects: 'Construction_Projects',
  Software_Development: 'Software_Development',
  Marketing_Campaigns: 'Marketing_Campaigns',
  Corporate_Projects: 'Corporate_Projects',
  Others: 'Others'
};

exports.Status = exports.$Enums.Status = {
  Success: 'Success',
  Pending: 'Pending'
};

exports.Typetrans = exports.$Enums.Typetrans = {
  Debit: 'Debit',
  Credit: 'Credit'
};

exports.NoteType = exports.$Enums.NoteType = {
  Finance: 'Finance',
  Legal: 'Legal'
};

exports.Msgtype = exports.$Enums.Msgtype = {
  Email: 'Email',
  Whatsapp: 'Whatsapp'
};

exports.ScheduleMsgStatus = exports.$Enums.ScheduleMsgStatus = {
  Pending: 'Pending',
  Delivered: 'Delivered'
};

exports.Categories = exports.$Enums.Categories = {
  Basic_Electricals: 'Basic_Electricals',
  Construction_Essentials: 'Construction_Essentials',
  Party_Essentials: 'Party_Essentials',
  Food_Essentials: 'Food_Essentials',
  Pharma_Essentials: 'Pharma_Essentials',
  Apparels_Clothing_and_Garments: 'Apparels_Clothing_and_Garments',
  Electrical_Goods_and_Supplies: 'Electrical_Goods_and_Supplies',
  Hospital_and_Medical_Equipment: 'Hospital_and_Medical_Equipment',
  Industrial_Plants_Machinery_and_Equipment: 'Industrial_Plants_Machinery_and_Equipment',
  Food_Event_Services: 'Food_Event_Services',
  Beauty_Wellness: 'Beauty_Wellness',
  Home_Services: 'Home_Services',
  Local_Services: 'Local_Services',
  Errands_Delivery: 'Errands_Delivery',
  Miscellaneous_Services: 'Miscellaneous_Services',
  Consultancy: 'Consultancy'
};

exports.Mode = exports.$Enums.Mode = {
  Home_Delivery: 'Home_Delivery',
  Offline: 'Offline',
  Call: 'Call'
};

exports.Type = exports.$Enums.Type = {
  Product: 'Product',
  Service: 'Service'
};

exports.Prisma.ModelName = {
  User: 'User',
  JobProfile: 'JobProfile',
  Dealers: 'Dealers',
  Order: 'Order',
  Project: 'Project',
  Member: 'Member',
  Inventory: 'Inventory',
  Team: 'Team',
  Listing: 'Listing',
  Task: 'Task',
  Transaction: 'Transaction',
  Finance: 'Finance',
  Remainders: 'Remainders',
  Note: 'Note',
  ScheduleMsg: 'ScheduleMsg',
  SellerAccount: 'SellerAccount',
  Products: 'Products',
  ProductQuery: 'ProductQuery',
  WishList: 'WishList',
  Review: 'Review',
  Document: 'Document'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
